// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6468.cubeMover2001;

import org.usfirst.frc6468.cubeMover2001.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6468.cubeMover2001.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton leftBump;
    public JoystickButton rightBump;
    public Xbox gamePad;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

      
        gamePad = new XboxController(0);
        joystick = new Joystick(1);
        /**
        joystickButton5 = new JoystickButton(joystick2, 1);
        joystickButton5.whileHeld(new dropDown());
        joystickButton4 = new JoystickButton(joystick2, 1);
        joystickButton4.whileHeld(new liftUp());
        joystickButton3 = new JoystickButton(joystick2, 1);
        joystickButton3.whileHeld(new closeClaw());
        joystickButton2 = new JoystickButton(joystick2, 1);
        joystickButton2.whileHeld(new openClaw());
        xBox = new Joystick(0);
        */
        rightBump = new JoystickButton(xBox, 1);
        rightBump.whileHeld(new slideRight());
        leftBump = new JoystickButton(xBox, 1);
        leftBump.whileHeld(new slideLeft());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous", new Autonomous());
        SmartDashboard.putData("closeClaw", new closeClaw());
        SmartDashboard.putData("driveStraight", new driveStraight());
        SmartDashboard.putData("slideLeft", new slideLeft());
        SmartDashboard.putData("slideRight", new slideRight());
        SmartDashboard.putData("moveWithSticks", new moveWithSticks());
        SmartDashboard.putData("liftUp", new liftUp());
        SmartDashboard.putData("dropDown", new dropDown());
        SmartDashboard.putData("climb", new climb());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXBox() {
        return xBox;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }

    public Joystick getJoystick3() {
        return joystick3;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

